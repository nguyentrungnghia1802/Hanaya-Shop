/**
 * Hanaya Shop Chatbot - CSP Compliant Version
 * All event handlers use addEventListener instead of inline events
 */

class HanayaChatbot {
    constructor() {
        this.isOpen = false;
        this.messages = [];
        this.responses = {
            greetings: [
                "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Hanaya Shop. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
                "Ch√†o b·∫°n! T√¥i ·ªü ƒë√¢y ƒë·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ s·∫£n ph·∫©m v√† d·ªãch v·ª• c·ªßa Hanaya Shop.",
                "Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n h√¥m nay."
            ],
            products: [
                "Hanaya Shop chuy√™n cung c·∫•p hoa t∆∞∆°i cao c·∫•p, qu√† t·∫∑ng √Ω nghƒ©a v√† ph·ª• ki·ªán trang tr√≠. B·∫°n quan t√¢m ƒë·∫øn lo·∫°i s·∫£n ph·∫©m n√†o?",
                "Ch√∫ng t√¥i c√≥ nhi·ªÅu lo·∫°i hoa: hoa h·ªìng, hoa ly, hoa tulip, v√† nhi·ªÅu lo·∫°i kh√°c. B·∫°n c√≥ th·ªÉ xem trong m·ª•c S·∫£n ph·∫©m.",
                "C√°c s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i bao g·ªìm: hoa t∆∞∆°i, b√≥ hoa, l·∫µng hoa, h·ªôp qu√†, v√† ph·ª• ki·ªán trang tr√≠."
            ],
            order: [
                "ƒê·ªÉ ƒë·∫∑t h√†ng, b·∫°n c√≥ th·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng v√† ti·∫øn h√†nh thanh to√°n. Ch√∫ng t√¥i h·ªó tr·ª£ nhi·ªÅu ph∆∞∆°ng th·ª©c thanh to√°n.",
                "Quy tr√¨nh ƒë·∫∑t h√†ng r·∫•t ƒë∆°n gi·∫£n: Ch·ªçn s·∫£n ph·∫©m ‚Üí Th√™m v√†o gi·ªè ‚Üí Thanh to√°n ‚Üí X√°c nh·∫≠n ƒë∆°n h√†ng.",
                "Sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n v√† c√≥ th·ªÉ theo d√µi tr·∫°ng th√°i ƒë∆°n h√†ng."
            ],
            delivery: [
                "Hanaya Shop giao h√†ng to√†n qu·ªëc. Th·ªùi gian giao h√†ng t·ª´ 1-3 ng√†y t√πy v√†o ƒë·ªãa ƒëi·ªÉm.",
                "Ch√∫ng t√¥i c√≥ d·ªãch v·ª• giao h√†ng nhanh trong ng√†y t·∫°i TP.HCM v√† H√† N·ªôi.",
                "Ph√≠ giao h√†ng s·∫Ω ƒë∆∞·ª£c t√≠nh d·ª±a tr√™n kho·∫£ng c√°ch v√† tr·ªçng l∆∞·ª£ng ƒë∆°n h√†ng."
            ],
            contact: [
                "B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i qua:",
                "üìç ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
                "üìû ƒêi·ªán tho·∫°i: (028) 1234 5678",
                "üìß Email: info@hanayashop.com"
            ],
            default: [
                "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ s·∫£n ph·∫©m, ƒë·∫∑t h√†ng, giao h√†ng ho·∫∑c li√™n h·ªá.",
                "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ: s·∫£n ph·∫©m hoa t∆∞∆°i, c√°ch ƒë·∫∑t h√†ng, th√¥ng tin giao h√†ng, v√† th√¥ng tin li√™n h·ªá.",
                "B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ c√°c ch·ªß ƒë·ªÅ: s·∫£n ph·∫©m, ƒë·∫∑t h√†ng, giao h√†ng, thanh to√°n, ho·∫∑c li√™n h·ªá."
            ]
        };
        
        this.init();
    }

    init() {
        this.createChatbotHTML();
        this.bindEvents();
        this.addInitialMessage();
    }

    createChatbotHTML() {
        const chatbotHTML = `
            <!-- Chatbot Container -->
            <div id="chatbot-container" class="fixed bottom-4 right-4 z-50 hidden md:block">
                <!-- Chat Button -->
                <div id="chat-button" class="w-16 h-16 bg-gradient-to-r from-pink-500 to-purple-600 rounded-full shadow-lg cursor-pointer flex items-center justify-center transform transition-all duration-300 hover:scale-110 hover:shadow-xl animate-pulse">
                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                    </svg>
                </div>

                <!-- Chat Window -->
                <div id="chat-window" class="absolute bottom-20 right-0 w-80 h-96 bg-white rounded-lg shadow-2xl border border-gray-200 hidden flex-col overflow-hidden transform transition-all duration-300">
                    <!-- Header -->
                    <div class="bg-gradient-to-r from-pink-500 to-purple-600 text-white p-4 flex justify-between items-center">
                        <div class="flex items-center space-x-2">
                            <div class="w-8 h-8 bg-white rounded-full flex items-center justify-center">
                                <svg class="w-5 h-5 text-pink-500" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd"></path>
                                </svg>
                            </div>
                            <div>
                                <h3 class="font-semibold text-sm">Hanaya Assistant</h3>
                                <p class="text-xs opacity-90">Tr·ª£ l√Ω ·∫£o</p>
                            </div>
                        </div>
                        <button id="close-chat" class="text-white hover:text-gray-200 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>

                    <!-- Messages Container -->
                    <div id="chat-messages" class="flex-1 p-4 overflow-y-auto space-y-4 bg-gray-50">
                        <!-- Messages will be inserted here -->
                    </div>

                    <!-- Input Area -->
                    <div class="p-4 border-t border-gray-200 bg-white">
                        <div class="flex space-x-2">
                            <input 
                                type="text" 
                                id="chat-input" 
                                placeholder="Nh·∫≠p tin nh·∫Øn..." 
                                class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-transparent text-sm"
                                maxlength="200"
                            >
                            <button 
                                id="send-message" 
                                class="px-4 py-2 bg-gradient-to-r from-pink-500 to-purple-600 text-white rounded-lg hover:from-pink-600 hover:to-purple-700 transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-pink-500"
                            >
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                                </svg>
                            </button>
                        </div>
                        <div class="mt-2 flex flex-wrap gap-1">
                            <button class="quick-reply text-xs px-2 py-1 bg-gray-100 hover:bg-gray-200 rounded-full transition-colors" data-message="S·∫£n ph·∫©m">S·∫£n ph·∫©m</button>
                            <button class="quick-reply text-xs px-2 py-1 bg-gray-100 hover:bg-gray-200 rounded-full transition-colors" data-message="ƒê·∫∑t h√†ng">ƒê·∫∑t h√†ng</button>
                            <button class="quick-reply text-xs px-2 py-1 bg-gray-100 hover:bg-gray-200 rounded-full transition-colors" data-message="Giao h√†ng">Giao h√†ng</button>
                            <button class="quick-reply text-xs px-2 py-1 bg-gray-100 hover:bg-gray-200 rounded-full transition-colors" data-message="Li√™n h·ªá">Li√™n h·ªá</button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', chatbotHTML);
    }

    bindEvents() {
        // Chat button click
        document.getElementById('chat-button').addEventListener('click', () => {
            this.toggleChat();
        });

        // Close chat button
        document.getElementById('close-chat').addEventListener('click', () => {
            this.closeChat();
        });

        // Send message button
        document.getElementById('send-message').addEventListener('click', () => {
            this.sendMessage();
        });

        // Enter key to send message
        document.getElementById('chat-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendMessage();
            }
        });

        // Quick reply buttons
        document.querySelectorAll('.quick-reply').forEach(button => {
            button.addEventListener('click', (e) => {
                const message = e.target.getAttribute('data-message');
                this.sendUserMessage(message);
            });
        });

        // Click outside to close
        document.addEventListener('click', (e) => {
            const container = document.getElementById('chatbot-container');
            if (this.isOpen && !container.contains(e.target)) {
                this.closeChat();
            }
        });
    }

    toggleChat() {
        if (this.isOpen) {
            this.closeChat();
        } else {
            this.openChat();
        }
    }

    openChat() {
        const chatWindow = document.getElementById('chat-window');
        const chatButton = document.getElementById('chat-button');
        
        chatWindow.classList.remove('hidden');
        chatWindow.classList.add('flex');
        chatButton.classList.remove('animate-pulse');
        this.isOpen = true;

        // Focus on input
        setTimeout(() => {
            document.getElementById('chat-input').focus();
        }, 300);
    }

    closeChat() {
        const chatWindow = document.getElementById('chat-window');
        const chatButton = document.getElementById('chat-button');
        
        chatWindow.classList.add('hidden');
        chatWindow.classList.remove('flex');
        chatButton.classList.add('animate-pulse');
        this.isOpen = false;
    }

    addInitialMessage() {
        setTimeout(() => {
            this.addBotMessage(this.getRandomResponse('greetings'));
        }, 1000);
    }

    sendMessage() {
        const input = document.getElementById('chat-input');
        const message = input.value.trim();
        
        if (message) {
            this.sendUserMessage(message);
            input.value = '';
        }
    }

    sendUserMessage(message) {
        this.addUserMessage(message);
        
        // Simulate typing delay
        setTimeout(() => {
            const response = this.generateResponse(message);
            this.addBotMessage(response);
        }, 800 + Math.random() * 1200);
    }

    addUserMessage(message) {
        const messagesContainer = document.getElementById('chat-messages');
        const messageElement = document.createElement('div');
        messageElement.className = 'flex justify-end';
        messageElement.innerHTML = `
            <div class="max-w-xs bg-gradient-to-r from-pink-500 to-purple-600 text-white rounded-lg px-4 py-2 text-sm shadow-md">
                ${this.escapeHtml(message)}
            </div>
        `;
        messagesContainer.appendChild(messageElement);
        this.scrollToBottom();
    }

    addBotMessage(message) {
        const messagesContainer = document.getElementById('chat-messages');
        const messageElement = document.createElement('div');
        messageElement.className = 'flex justify-start';
        messageElement.innerHTML = `
            <div class="max-w-xs bg-white border border-gray-200 rounded-lg px-4 py-2 text-sm shadow-md">
                <div class="flex items-center space-x-2 mb-1">
                    <div class="w-4 h-4 bg-gradient-to-r from-pink-500 to-purple-600 rounded-full"></div>
                    <span class="text-xs font-medium text-gray-600">Hanaya Assistant</span>
                </div>
                <div class="text-gray-800">${this.escapeHtml(message)}</div>
            </div>
        `;
        messagesContainer.appendChild(messageElement);
        this.scrollToBottom();
    }

    scrollToBottom() {
        const messagesContainer = document.getElementById('chat-messages');
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    generateResponse(message) {
        const lowerMessage = message.toLowerCase();
        
        // Greetings
        if (this.containsKeywords(lowerMessage, ['xin ch√†o', 'ch√†o', 'hello', 'hi', 'hey'])) {
            return this.getRandomResponse('greetings');
        }
        
        // Products
        if (this.containsKeywords(lowerMessage, ['s·∫£n ph·∫©m', 'hoa', 'product', 'flower', 'b√°n', 'c√≥ g√¨'])) {
            return this.getRandomResponse('products');
        }
        
        // Orders
        if (this.containsKeywords(lowerMessage, ['ƒë·∫∑t h√†ng', 'order', 'mua', 'thanh to√°n', 'payment'])) {
            return this.getRandomResponse('order');
        }
        
        // Delivery
        if (this.containsKeywords(lowerMessage, ['giao h√†ng', 'delivery', 'ship', 'v·∫≠n chuy·ªÉn', 'nh·∫≠n h√†ng'])) {
            return this.getRandomResponse('delivery');
        }
        
        // Contact
        if (this.containsKeywords(lowerMessage, ['li√™n h·ªá', 'contact', 'ƒë·ªãa ch·ªâ', 'phone', 'email', 'hotline'])) {
            return this.getRandomResponse('contact');
        }
        
        // Price
        if (this.containsKeywords(lowerMessage, ['gi√°', 'price', 'cost', 'bao nhi·ªÅu', 'ti·ªÅn'])) {
            return "Gi√° s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i r·∫•t c·∫°nh tranh. B·∫°n c√≥ th·ªÉ xem gi√° c·ª• th·ªÉ c·ªßa t·ª´ng s·∫£n ph·∫©m trong m·ª•c S·∫£n ph·∫©m. N·∫øu c·∫ßn h·ªó tr·ª£ th√™m, vui l√≤ng li√™n h·ªá hotline.";
        }
        
        // Quality
        if (this.containsKeywords(lowerMessage, ['ch·∫•t l∆∞·ª£ng', 'quality', 'fresh', 't∆∞∆°i', 'ƒë·∫πp'])) {
            return "Hanaya Shop cam k·∫øt mang ƒë·∫øn nh·ªØng s·∫£n ph·∫©m hoa t∆∞∆°i ch·∫•t l∆∞·ª£ng cao nh·∫•t. Ch√∫ng t√¥i nh·∫≠p kh·∫©u tr·ª±c ti·∫øp t·ª´ c√°c v∆∞·ªùn hoa uy t√≠n v√† b·∫£o qu·∫£n trong ƒëi·ªÅu ki·ªán t·ªëi ∆∞u.";
        }
        
        // Thanks
        if (this.containsKeywords(lowerMessage, ['c·∫£m ∆°n', 'thanks', 'thank you', 'c√°m ∆°n'])) {
            return "R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n! N·∫øu c√≥ th√™m c√¢u h·ªèi n√†o kh√°c, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi t√¥i nh√©. Hanaya Shop lu√¥n s·∫µn s√†ng ph·ª•c v·ª• b·∫°n! üå∏";
        }
        
        return this.getRandomResponse('default');
    }

    containsKeywords(message, keywords) {
        return keywords.some(keyword => message.includes(keyword));
    }

    getRandomResponse(category) {
        const responses = this.responses[category];
        return responses[Math.floor(Math.random() * responses.length)];
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// Initialize chatbot when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    new HanayaChatbot();
});
