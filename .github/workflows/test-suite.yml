name: 🧪 Test Suite

# Smart triggering strategy
on:
  push:
    branches: 
      - develop
      - 'feature/**'
      - 'hotfix/**'
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
      - '#GUIDE/**'
      
  pull_request:
    branches: [develop]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
      - '#GUIDE/**'

  workflow_dispatch:
    inputs:
      run_security_scan:
        description: 'Run security vulnerability scan'
        required: false
        default: true
        type: boolean

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'
  COMPOSER_CACHE_VERSION: v1
  NPM_CACHE_VERSION: v1

jobs:
  # 🔍 Pre-flight checks
  setup:
    name: 🔍 Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      php-cache-key: ${{ steps.cache-keys.outputs.php }}
      npm-cache-key: ${{ steps.cache-keys.outputs.npm }}
      should-run-security: ${{ steps.conditions.outputs.security }}
      should-run-docker: ${{ steps.conditions.outputs.docker }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "php=dependencies-composer-${{ env.COMPOSER_CACHE_VERSION }}-${{ hashFiles('composer.lock') }}" >> $GITHUB_OUTPUT
          echo "npm=dependencies-npm-${{ env.NPM_CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT
          
      - name: Set conditions
        id: conditions
        run: |
          echo "🔍 Debug branch info:"
          echo "github.ref: ${{ github.ref }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "github.event_name: ${{ github.event_name }}"
          
          # Run security scan on develop or manual trigger
          if [[ "${{ github.ref }}" == "refs/heads/develop" || "${{ github.event.inputs.run_security_scan }}" == "true" ]]; then
            echo "security=true" >> $GITHUB_OUTPUT
            echo "✅ Security scan will run"
          else
            echo "security=false" >> $GITHUB_OUTPUT
            echo "⏭️ Security scan skipped"
          fi
          
          # Run Docker build test on develop or any push event
          if [[ "${{ github.ref }}" == "refs/heads/develop" || ("${{ github.event_name }}" == "push" && "${{ github.ref_name }}" == "develop") ]]; then
            echo "docker=true" >> $GITHUB_OUTPUT
            echo "✅ Docker build will run"
          else
            echo "docker=false" >> $GITHUB_OUTPUT
            echo "⏭️ Docker build skipped"
          fi
          
      - name: Debug info
        run: |
          echo "🔍 Test Suite Started"
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Security scan: ${{ steps.conditions.outputs.security }}"
          echo "Docker build: ${{ steps.conditions.outputs.docker }}"

  # 📦 Dependencies & Build
  dependencies:
    name: 📦 Install Dependencies
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, redis
          coverage: none
          tools: composer:v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache/files
          key: ${{ needs.setup.outputs.php-cache-key }}
          restore-keys: |
            dependencies-composer-${{ env.COMPOSER_CACHE_VERSION }}-

      - name: Install PHP dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install NPM dependencies  
        run: npm ci

      - name: Build frontend assets
        run: npm run build

      - name: Cache built assets
        uses: actions/cache@v3
        with:
          path: |
            vendor/
            node_modules/
            public/build/
          key: built-assets-${{ github.sha }}

  # 🧪 Core Testing
  tests:
    name: 🧪 Laravel Tests
    runs-on: ubuntu-latest
    needs: [setup, dependencies]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: hanaya_shop_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, redis
          coverage: xdebug
          tools: composer:v2

      - name: Restore built assets
        uses: actions/cache@v3
        with:
          path: |
            vendor/
            node_modules/
            public/build/
          key: built-assets-${{ github.sha }}

      - name: Prepare test environment
        run: |
          cp .env.example .env
          php artisan key:generate
          
          # Configure test database
          sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
          sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env
          sed -i 's/DB_PORT=.*/DB_PORT=3306/' .env
          sed -i 's/DB_DATABASE=.*/DB_DATABASE=hanaya_shop_test/' .env
          sed -i 's/DB_USERNAME=.*/DB_USERNAME=root/' .env
          sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=password/' .env
          
          # Configure Redis and Mail
          echo "REDIS_HOST=127.0.0.1" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "CACHE_DRIVER=array" >> .env
          echo "SESSION_DRIVER=array" >> .env
          echo "QUEUE_CONNECTION=sync" >> .env
          echo "MAIL_MAILER=array" >> .env
          echo "MAIL_FROM_ADDRESS=test@hanaya-shop.com" >> .env
          echo 'MAIL_FROM_NAME="Hanaya Shop Test"' >> .env

      - name: Create storage directories
        run: |
          mkdir -p storage/framework/{cache/data,sessions,views,testing}
          mkdir -p storage/{app/public,logs}
          mkdir -p bootstrap/cache
          chmod -R 755 storage bootstrap/cache

      - name: Run database setup
        run: |
          php artisan migrate --force
          php artisan db:seed --force

      - name: Run PHPUnit tests
        run: |
          ./vendor/bin/phpunit --testdox --colors=always
          
      - name: Generate test coverage (on develop)
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "📊 Generating test coverage..."
          ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml --testdox || echo "⚠️ Coverage generation completed with warnings"
          
      - name: Upload coverage reports
        if: github.ref == 'refs/heads/develop'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  # 🎨 Code Quality
  quality:
    name: 🎨 Code Quality
    runs-on: ubuntu-latest
    needs: [setup, dependencies]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, redis
          tools: composer:v2

      - name: Restore built assets
        uses: actions/cache@v3
        with:
          path: |
            vendor/
            node_modules/
            public/build/
          key: built-assets-${{ github.sha }}

      - name: Run PHP Linting (Laravel Pint)
        run: |
          ./vendor/bin/pint --test
          
      - name: Run static analysis (optional)
        continue-on-error: true
        run: |
          if [ -f "./vendor/bin/phpstan" ]; then
            ./vendor/bin/phpstan analyse --no-progress
          else
            echo "⚠️ PHPStan not installed, skipping static analysis"
          fi

  # 🔒 Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [setup, dependencies]
    if: needs.setup.outputs.should-run-security == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: Restore built assets
        uses: actions/cache@v3
        with:
          path: |
            vendor/
            node_modules/
            public/build/
          key: built-assets-${{ github.sha }}

      - name: Check for vulnerabilities
        run: |
          echo "🔒 Running security audit..."
          composer audit || echo "⚠️ Vulnerabilities found - review required"
          
      - name: Check NPM vulnerabilities
        run: |
          echo "🔒 Running NPM audit..."
          npm audit --audit-level=high || echo "⚠️ NPM vulnerabilities found"

  # 🐳 Docker Build Test
  docker:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [setup, tests]
    if: needs.setup.outputs.should-run-docker == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: hanaya-shop:test-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          echo "🐳 Testing Docker container..."
          docker run --rm -d --name hanaya-test-${{ github.run_number }} hanaya-shop:test-${{ github.sha }}
          sleep 15
          
          echo "📋 Container logs:"
          docker logs hanaya-test-${{ github.run_number }}
          
          echo "🏥 Health check:"
          if docker exec hanaya-test-${{ github.run_number }} curl -f http://localhost > /dev/null 2>&1; then
            echo "✅ Docker image is healthy!"
          else
            echo "⚠️ Docker health check failed"
          fi
          
          docker stop hanaya-test-${{ github.run_number }}

  # 📊 Results Summary
  summary:
    name: 📊 Test Results
    runs-on: ubuntu-latest
    needs: [setup, tests, quality, security, docker]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## 📊 Test Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Dependencies | ${{ needs.dependencies.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Tests | ${{ needs.tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎨 Code Quality | ${{ needs.quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security | ${{ needs.security.result == 'success' && '✅ Clean' || needs.security.result == 'skipped' && '⏭️ Skipped' || '⚠️ Issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐳 Docker | ${{ needs.docker.result == 'success' && '✅ Built' || needs.docker.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.tests.result }}" == "success" && "${{ needs.quality.result }}" == "success" ]]; then
            echo "### 🎉 All core tests passed! Ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Some tests failed. Review before merging." >> $GITHUB_STEP_SUMMARY
          fi