name: Staging Deploy

on:
  push:
    branches: [develop]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
      - '#GUIDE/**'
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test-first:
    runs-on: ubuntu-latest
    name: Run Tests First
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: hanaya_shop_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, redis
          coverage: none
          tools: composer:v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install PHP dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install NPM dependencies
        run: npm ci

      - name: Build frontend assets
        run: npm run build

      - name: Create .env file
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Configure environment for testing
        run: |
          echo "APP_ENV=testing" >> .env
          echo "APP_DEBUG=true" >> .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=hanaya_shop_test" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=password" >> .env
          echo "CACHE_DRIVER=array" >> .env
          echo "SESSION_DRIVER=array" >> .env
          echo "QUEUE_CONNECTION=sync" >> .env
          echo "MAIL_MAILER=array" >> .env
          echo "REDIS_HOST=127.0.0.1" >> .env
          echo "REDIS_PORT=6379" >> .env

      - name: Create storage directories and set permissions (Production-like)
        run: |
          echo "📁 Creating storage directories with production-like permissions..."
          # Create directories first
          mkdir -p storage/framework/cache/data
          mkdir -p storage/framework/sessions
          mkdir -p storage/framework/views
          mkdir -p storage/logs
          mkdir -p bootstrap/cache
          
          # Create .gitkeep files first (before changing permissions)
          touch storage/framework/cache/data/.gitkeep
          touch storage/framework/sessions/.gitkeep
          touch storage/framework/views/.gitkeep
          touch storage/logs/.gitkeep
          touch bootstrap/cache/.gitkeep
          
          # Now set production-like permissions using sudo
          sudo chown -R $USER:$USER storage bootstrap/cache
          sudo chmod -R 755 storage
          sudo chmod -R 755 bootstrap/cache
          
          echo "✅ Storage directories created with proper permissions"

      - name: Verify PHP configuration (Production-like)
        run: |
          echo "🔧 Verifying PHP configuration matches production..."
          php -v
          php -m | grep -E "(curl|mbstring|zip|xml|gd|redis|mysql)" || echo "⚠️ Some extensions might be missing"
          php -i | grep "memory_limit"
          php -i | grep "max_execution_time"
          
      - name: Check file permissions (Production-like)
        run: |
          echo "🔐 Checking file permissions..."
          ls -la storage/
          ls -la bootstrap/cache/
          # Verify writable directories
          test -w storage/framework/views || { echo "❌ storage/framework/views not writable"; exit 1; }
          test -w storage/logs || { echo "❌ storage/logs not writable"; exit 1; }
          test -w bootstrap/cache || { echo "❌ bootstrap/cache not writable"; exit 1; }

      - name: Clear and cache Laravel configurations
        run: |
          echo "🔧 Clearing and caching Laravel configurations..."
          php artisan config:clear
          php artisan route:clear
          php artisan view:clear
          
          # Skip cache:clear in testing since we use array driver
          echo "⚠️ Skipping cache:clear for array driver in testing"
          
          # Cache configurations (like production)
          php artisan config:cache
          php artisan route:cache
          
          # Only cache views if all directories are properly set up
          php artisan view:cache || { echo "⚠️ View caching failed, but continuing..."; }

      - name: Test storage directory creation (Production simulation)
        run: |
          echo "🧪 Testing storage operations..."
          # Test log writing
          php -r "file_put_contents('storage/logs/test.log', 'Test log entry');" || { echo "❌ Cannot write to logs"; exit 1; }
          
          # Test cache writing
          php -r "file_put_contents('storage/framework/cache/data/test.cache', 'Test cache');" || { echo "❌ Cannot write to cache"; exit 1; }
          
          # Test view compilation
          echo "@php echo 'Test view';" > resources/views/test-ci.blade.php
          php artisan view:cache
          rm -f resources/views/test-ci.blade.php
          
          echo "✅ Storage operations working correctly"

      - name: Run database migrations
        run: php artisan migrate --force

      - name: Seed database for testing
        run: php artisan db:seed --force || echo "⚠️ Seeding skipped or failed"

      - name: Run Tests - MUST PASS BEFORE BUILD
        run: |
          echo "🧪 Running Laravel tests..."
          php artisan test || {
            echo "❌ php artisan test failed, trying PHPUnit directly..."
            ./vendor/bin/phpunit
          }

      - name: Production Health Check Simulation
        run: |
          echo "🏥 Running production health checks..."
          
          # Check if Laravel can boot properly
          php artisan about || { echo "❌ Laravel cannot boot properly"; exit 1; }
          
          # Check database connection
          php artisan migrate:status || { echo "❌ Database connection failed"; exit 1; }
          
          # Skip cache operations for array driver in testing
          echo "⚠️ Skipping cache operations for array driver in testing"
          
          # Test route caching (critical for production)
          php artisan route:cache || { echo "❌ Route caching failed"; exit 1; }
          
          # Verify all essential directories exist and are writable
          echo "Checking critical directories..."
          test -d storage/framework/views || { echo "❌ Missing storage/framework/views"; exit 1; }
          test -d storage/logs || { echo "❌ Missing storage/logs"; exit 1; }
          test -d bootstrap/cache || { echo "❌ Missing bootstrap/cache"; exit 1; }
          
          # Check if views can compile
          php artisan view:clear
          php artisan view:cache || { echo "⚠️ View caching failed but continuing..."; }
          
          echo "✅ Production health checks passed!"

      - name: Run PHP Linting
        run: ./vendor/bin/pint --test

      - name: Docker Build Test (Local only)
        run: |
          echo "🐳 Testing Docker build locally..."
          docker build -t hanaya-local-test .
          echo "✅ Docker build successful!"
          docker image rm hanaya-local-test

  build-and-push:
    runs-on: ubuntu-latest
    name: Build & Push (Only if tests pass)
    needs: test-first  # 🛡️ CHỈ CHẠY NẾU TESTS PASS
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push staging image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            assassincreed2k1/hanaya-shop:staging-latest
            assassincreed2k1/hanaya-shop:staging-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          echo "🐳 Testing Docker image build..."
          docker run --rm --name hanaya-test-temp assassincreed2k1/hanaya-shop:staging-${{ github.sha }} php --version || echo "⚠️ Container test skipped"

  notify:
    runs-on: ubuntu-latest
    needs: [test-first, build-and-push]
    if: success()
    steps:
      - name: Staging Deploy Success
        run: |
          echo "✅ ALL STEPS COMPLETED SUCCESSFULLY!"
          echo "🧪 Tests passed ✅"
          echo "🐳 Image built and pushed ✅"
          echo "� Image: assassincreed2k1/hanaya-shop:staging-${{ github.sha }}"
          echo "� Ready for production deployment review"