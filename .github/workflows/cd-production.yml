name: CD Production Deploy

on:
  push:
    branches: [main]
  workflow_dispatch: # Cho ph√©p ch·∫°y th·ªß c√¥ng

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build & Deploy to Production
    
    environment:
      name: production
      url: http://www.hanayashop.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            assassincreed2k1/hanaya-shop:latest
            assassincreed2k1/hanaya-shop:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          script: |
            # Navigate to project directory
            cd /opt/hanaya-shop

            # Pull latest images
            echo "üîÑ Pulling latest Docker images..."
            docker compose pull

            # Backup current containers (optional)
            echo "üíæ Creating backup..."
            docker compose ps --format "table {{.Name}}\t{{.Status}}" > backup-$(date +%Y%m%d_%H%M%S).log

            # Deploy with zero-downtime
            echo "üöÄ Deploying new version..."
            docker compose up -d --remove-orphans

            # Clean up old images
            echo "üßπ Cleaning up old images..."
            docker image prune -f

            # Health check
            echo "‚ö° Performing health check..."
            sleep 15
            if curl -f http://localhost/health; then
              echo "‚úÖ Deployment successful!"
            else
              echo "‚ùå Deployment failed - rolling back..."
              docker compose down
              docker compose up -d
              exit 1
            fi

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}