name: CD Production Deploy

on:
  push:
    branches: [main]
  workflow_dispatch: # Cho ph√©p ch·∫°y th·ªß c√¥ng

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build & Deploy to Production
    
    environment:
      name: production
      url: http://www.hanayashop.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            assassincreed2k1/hanaya-shop:latest
            assassincreed2k1/hanaya-shop:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup SSH Key Authentication
        run: |
          # Create .ssh directory with proper permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Setup SSH private key with proper format and permissions
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add server to known hosts to avoid fingerprint prompts
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy to Production Server
        run: |
          # Deploy using SSH key authentication (best practice)
          ssh -i ~/.ssh/deploy_key -o ConnectTimeout=10 -o UserKnownHostsFile=~/.ssh/known_hosts ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'DEPLOYMENT_SCRIPT'
            set -e  # Exit on any error
            
            echo "üîó Connected to production server successfully!"
            cd /opt/hanaya-shop || { echo "‚ùå Project directory not found"; exit 1; }
            
            echo "ÔøΩ Current directory: $(pwd)"
            echo "üìã Checking docker-compose services..."
            if command -v docker-compose > /dev/null 2>&1; then
              docker-compose config --services
            else
              docker compose config --services
            fi
            
            echo "ÔøΩüöÄ Pulling latest Docker images..."
            if command -v docker-compose > /dev/null 2>&1; then
              docker-compose pull || { echo "‚ùå Failed to pull images"; exit 1; }
            else
              docker compose pull || { echo "‚ùå Failed to pull images"; exit 1; }
            fi
            
            echo "üì¶ Restarting containers with zero downtime..."
            if command -v docker-compose > /dev/null 2>&1; then
              docker-compose up -d || { echo "‚ùå Failed to start containers"; exit 1; }
            else
              docker compose up -d || { echo "‚ùå Failed to start containers"; exit 1; }
            fi
            
            echo "üßπ Cleaning up old Docker images..."
            docker system prune -f || echo "‚ö†Ô∏è  Cleanup failed but continuing..."
            
            echo "üîç Verifying deployment..."
            if command -v docker-compose > /dev/null 2>&1; then
              CONTAINERS=$(docker-compose ps --services --filter "status=running")
            else
              CONTAINERS=$(docker compose ps --services --filter "status=running")
            fi
            
            if [ ! -z "$CONTAINERS" ]; then
              echo "‚úÖ Deployment successful! Running containers:"
              if command -v docker-compose > /dev/null 2>&1; then
                docker-compose ps
              else
                docker compose ps
              fi
              
              # Health check the application
              echo "üè• Performing health check..."
              sleep 10  # Wait for container to fully start
              if curl -f http://localhost/health > /dev/null 2>&1 || curl -f http://localhost > /dev/null 2>&1; then
                echo "‚úÖ Application health check passed!"
              else
                echo "‚ö†Ô∏è  Health check failed, but containers are running"
              fi
            else
              echo "‚ùå Deployment failed! No containers running."
              exit 1
            fi
            
            echo "üéâ Production deployment completed successfully!"
          DEPLOYMENT_SCRIPT

      # Deployment completed successfully
      - name: Deployment Success
        if: success()
        run: |
          echo "üéâ Deployment to production completed successfully!"
          echo "‚úÖ Docker image: assassincreed2k1/hanaya-shop:${{ github.sha }}"
          echo "üåê Application URL: http://www.hanayashop.com"