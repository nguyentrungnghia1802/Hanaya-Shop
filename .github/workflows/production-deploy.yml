name: Production Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build & Deploy to Production
    environment:
      name: production
      url: http://www.hanayashop.com

    steps:
      - name: Debug Info
        run: |
          echo "Workflow started!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Repository: ${{ github.repository }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            assassincreed2k1/hanaya-shop:latest
            assassincreed2k1/hanaya-shop:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup SSH Key Authentication
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy to Production Server
        run: |
          ssh -i ~/.ssh/deploy_key -o ConnectTimeout=10 -o UserKnownHostsFile=~/.ssh/known_hosts ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'DEPLOYMENT_SCRIPT'
            set -e
            echo "üîó Connected to production server successfully!"
            cd /opt/hanaya-shop || { echo "‚ùå Project directory not found"; exit 1; }
            echo "üìÅ Current directory: $(pwd)"
            
            echo "üíæ Creating backup before deployment..."
            if [ -f "./manage.sh" ]; then
              ./manage.sh backup || echo "‚ö†Ô∏è Backup script failed, continuing anyway..."
            fi
            
            echo "üõë Stopping nginx service to free port 80..."
            sudo systemctl stop nginx || echo "‚ö†Ô∏è nginx service not running or already stopped"
            sudo systemctl disable nginx || echo "‚ö†Ô∏è nginx service disable failed"
            
            echo "üöÄ Pulling latest Docker images..."
            if command -v docker-compose > /dev/null 2>&1; then
              docker-compose pull || { echo "‚ùå Failed to pull images"; exit 1; }
            else
              docker compose pull || { echo "‚ùå Failed to pull images"; exit 1; }
            fi
            
            echo "üîÑ Performing rolling update to preserve data..."
            if [ -f "./docker-deploy.sh" ]; then
              echo "üì¶ Using existing deploy script..."
              ./docker-deploy.sh || { echo "‚ùå Deploy script failed"; exit 1; }
            else
              echo "üì¶ Using docker-compose for safe update..."
              if command -v docker-compose > /dev/null 2>&1; then
                # Safe update: restart only app containers, keep data containers running
                docker-compose up -d --no-deps --force-recreate app queue || { echo "‚ùå Failed to update app containers"; exit 1; }
              else
                docker compose up -d --no-deps --force-recreate app queue || { echo "‚ùå Failed to update app containers"; exit 1; }
              fi
            fi
            
            echo "üîç Verifying deployment..."
            sleep 15  # Wait for containers to be fully ready
            if docker ps | grep -q "hanaya"; then
              echo "‚úÖ Deployment successful! Containers are running:"
              docker ps --filter name=hanaya --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
              
              echo "üè• Performing health check..."
              if curl -f http://localhost > /dev/null 2>&1; then
                echo "‚úÖ Application health check passed!"
              else
                echo "‚ö†Ô∏è Health check failed, checking container logs..."
                docker logs hanaya_app --tail 20 || echo "Could not get app logs"
              fi
            else
              echo "‚ùå Deployment failed! No containers running."
              exit 1
            fi
            
            echo "üéâ Production deployment completed successfully!"
          DEPLOYMENT_SCRIPT

      - name: Deployment Success
        if: success()
        run: |
          echo "üéâ Deployment to production completed successfully!"
          echo "‚úÖ Docker image: assassincreed2k1/hanaya-shop:${{ github.sha }}"
          echo "üåê Application URL: http://www.hanayashop.com"