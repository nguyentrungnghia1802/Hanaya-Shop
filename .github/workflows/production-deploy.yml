name: Production Deploy

on:
  pull_request:
    branches: [main]  # Trigger on PR to main
  push:
    branches: [main]  # Trigger on push to main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
      - '#GUIDE/**'
      - 'deployment/README.md'
      - 'deployment/BRANCH_STRATEGY.md'
      - 'deployment/CICD_SETUP.md'
  workflow_dispatch:

jobs:
  pre-deployment-tests:
    runs-on: ubuntu-latest
    name: Pre-deployment Tests
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: hanaya_shop_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, redis
          coverage: none
          tools: composer:v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies and run tests
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader
          npm ci
          npm run build
          cp .env.example .env
          php artisan key:generate
          
          # Configure test environment
          echo "APP_ENV=testing" >> .env
          echo "APP_DEBUG=true" >> .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=hanaya_shop_test" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=password" >> .env
          echo "CACHE_DRIVER=array" >> .env
          echo "SESSION_DRIVER=array" >> .env
          echo "QUEUE_CONNECTION=sync" >> .env
          echo "MAIL_MAILER=array" >> .env
          echo "REDIS_HOST=127.0.0.1" >> .env
          echo "REDIS_PORT=6379" >> .env
          
          # Create storage directories
          mkdir -p storage/framework/{cache/data,sessions,views}
          mkdir -p storage/logs bootstrap/cache
          chmod -R 755 storage bootstrap/cache
          
          # Run migrations, tests, and quality checks
          php artisan migrate --force
          php artisan db:seed --force || echo "⚠️ Seeding skipped"
          php artisan test
          ./vendor/bin/pint --test || echo "⚠️ Linting issues found"
          composer audit || echo "⚠️ Security vulnerabilities found"

  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build & Deploy to Production
    needs: pre-deployment-tests  # 🛡️ CHỈ DEPLOY NẾU TESTS PASS
    environment:
      name: production
      url: http://www.hanayashop.com

    steps:
      - name: Debug Info
        run: |
          echo "🚀 Production deployment started!"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Repository: ${{ github.repository }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "💡 This is a PR deployment for review"
          else
            echo "💡 This is a main branch official deployment"
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            assassincreed2k1/hanaya-shop:latest
            assassincreed2k1/hanaya-shop:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup SSH Key Authentication
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy to Production Server
        run: |
          ssh -i ~/.ssh/deploy_key -o ConnectTimeout=10 -o UserKnownHostsFile=~/.ssh/known_hosts ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'DEPLOYMENT_SCRIPT'
            set -e
            echo "🔗 Connected to production server successfully!"
            cd /opt/hanaya-shop || { echo "❌ Project directory not found"; exit 1; }
            echo "📁 Current directory: $(pwd)"
            
            echo " Stopping nginx service to free port 80..."
            sudo systemctl stop nginx || echo "⚠️ nginx service not running or already stopped"
            sudo systemctl disable nginx || echo "⚠️ nginx service disable failed"
            
            echo "🚀 Running update script..."
            cd scripts || { echo "❌ Scripts directory not found"; exit 1; }
            ./update-image.sh || { echo "❌ Update script failed"; exit 1; }
            
            echo "🔍 Verifying deployment..."
            cd /opt/hanaya-shop
            if docker ps | grep -q "hanaya"; then
              echo "✅ Deployment successful! Containers are running:"
              docker ps --filter name=hanaya --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
              
              echo "🏥 Final health check..."
              sleep 5
              if curl -f http://localhost > /dev/null 2>&1; then
                echo "✅ Application is healthy and responding!"
                echo "🌐 Website is now live with latest updates!"
              else
                echo "⚠️ Health check failed, but deployment completed"
                echo "💡 Try clearing browser cache (Ctrl+Shift+R)"
              fi
            else
              echo "❌ No containers found running"
              exit 1
            fi
            
            echo "🎉 Production deployment completed successfully!"
          DEPLOYMENT_SCRIPT

      - name: Deployment Success
        if: success()
        run: |
          echo "🎉 Deployment to production completed successfully!"
          echo "✅ Docker image: assassincreed2k1/hanaya-shop:${{ github.sha }}"
          echo "🌐 Application URL: http://www.hanayashop.com"